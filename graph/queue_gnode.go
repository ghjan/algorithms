// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package graph

import (
	"sync"
)

type GNodeQueue struct {
	items []GNode
	lock  sync.RWMutex
}

// 创建队列
func (q *GNodeQueue) New() *GNodeQueue {
	q.items = []GNode{}
	return q
}

// 入队列
func (q *GNodeQueue) Enqueue(t GNode) {
	q.lock.Lock()
	q.items = append(q.items, t)
	q.lock.Unlock()
}

// 出队列
func (q *GNodeQueue) Dequeue() *GNode {
	q.lock.Lock()
	item := q.items[0]
	q.items = q.items[1:len(q.items)]
	q.lock.Unlock()
	return &item
}

// 获取队列的第一个元素，不移除
func (q *GNodeQueue) Front() *GNode {
	q.lock.Lock()
	item := q.items[0]
	q.lock.Unlock()
	return &item
}

// 判空
func (q *GNodeQueue) IsEmpty() bool {
	return len(q.items) == 0
}

// 获取队列的长度
func (q *GNodeQueue) Size() int {
	return len(q.items)
}
